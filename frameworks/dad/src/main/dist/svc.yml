name: {{FRAMEWORK_NAME}}
scheduler:
  principal: {{FRAMEWORK_PRINCIPAL}}
  user: {{FRAMEWORK_USER}}
pods:
  bootstrap:
    count: 1
    placement: {{NODE_PLACEMENT}}
    uris:
       - {{DAD_GIT_ARCHIVE_ZIP_URI}}
    tasks:
      node:
        goal: RUNNING
        cmd: >
                env

                cd dcos-docker-dcos-dad-sdk/dcos-dad

                export dcos_dad_bootstrap_port=9200

                export dcos_dad_bootstrap_ip=bootstraphttp.$FRAMEWORK_NAME.l4lb.thisdcos.directory

                export dcos_dad_framework_name=$FRAMEWORK_NAME

                export dcos_dad_upstream_resolver=$(getent hosts leader.mesos | awk '{ print $1  }')

                export dcos_dad_cryptoid=$(curl localhost:62080/lashup/key/ | jq -r .zbase32_public_key)

                mkdir genconf

                mkdir genconf/serve

                mkdir genconf/tmp

                cat bootstrap_serve/dcos-dad-envfile-master | sed -e "s/dcos_dad_bootstrap_ip/$dcos_dad_bootstrap_ip/;s/dcos_dad_bootstrap_port/$dcos_dad_bootstrap_port/" >| genconf/serve/dcos-dad-envfile-master

                cat bootstrap_serve/dcos-dad-envfile-slave | sed -e "s/dcos_dad_bootstrap_ip/$dcos_dad_bootstrap_ip/;s/dcos_dad_bootstrap_port/$dcos_dad_bootstrap_port/;s/dcos_dad_slave_cpu/$dcos_dad_slave_cpu/;s/dcos_dad_slave_mem/$dcos_dad_slave_mem/" >| genconf/serve/dcos-dad-envfile-slave

                cat bootstrap_serve/dcos-dad-envfile-slave-public | sed -e "s/dcos_dad_bootstrap_ip/$dcos_dad_bootstrap_ip/;s/dcos_dad_bootstrap_port/$dcos_dad_bootstrap_port/;s/dcos_dad_slave_cpu/$dcos_dad_slave_cpu/;s/dcos_dad_slave_mem/$dcos_dad_slave_mem/" >| genconf/serve/dcos-dad-envfile-slave-public

                cat bootstrap_serve/config.yaml | sed -e "s/dcos_dad_num_masters/$dcos_dad_num_masters/;s/dcos_dad_bootstrap_ip/$dcos_dad_bootstrap_ip/;s/dcos_dad_bootstrap_port/$dcos_dad_bootstrap_port/;s/dcos_dad_framework_name/$dcos_dad_framework_name/;s/dcos_dad_cryptoid/$dcos_dad_cryptoid/;s/dcos_dad_upstream_resolver/$dcos_dad_upstream_resolver/;s/dcos_dad_prefix/$dcos_dad_prefix/" >| genconf/config.yaml

                cp bootstrap_serve/ip-detect genconf/ip-detect

                curl -o dcos_generate_config.sh $dcos_generate_config_url

                sh dcos_generate_config.sh

                echo "Running bootstrap nginx container."

                docker run -p $PORT_HTTP:80 -v $PWD/genconf/serve:/usr/share/nginx/html:ro nginx
        cpus: 0.1
        memory: 128
        env:
          dcos_generate_config_url: "abc"
          dcos_dad_num_masters: "1"
          dcos_dad_prefix: "jeid"
          dcos_dad_slave_cpu: "2"
          dcos_dad_slave_mem: "2500"
        ports:
            bootstraphttp:
                port: 0
                advertise: true
                env-key: PORT_HTTP
                vip:
                   prefix: bootstraphttp
                   port: 9200
        readiness-check:
            cmd: "curl -k -I -s -f http://$TASK_NAME.$FRAMEWORK_HOST:$PORT_HTTP/dcos-dad-envfile-master"
            interval: 5
            delay: 10
            timeout: 10
  master:
    count: 1
    placement: {{NODE_PLACEMENT}}
    {{#ENABLE_VIRTUAL_NETWORK}}
    networks:
      {{VIRTUAL_NETWORK_NAME}}:
        labels: {{VIRTUAL_NETWORK_PLUGIN_LABELS}}
    {{/ENABLE_VIRTUAL_NETWORK}}
    uris:
        - {{BOOTSTRAP_URI}}
        - "file:////home/core/.ssh/authorized_keys"
    image: {{DCOS_DAD_DOCKER_IMAGE}}
    tasks:
      node:
        goal: RUNNING
        cmd: >
                rm -rf var/*

                curl -O bootstraphttp.$FRAMEWORK_NAME.l4lb.thisdcos.directory:9200/dcos-dad-envfile-master

                ls

                printf "\n\n ######  Starting DAD master -- ${TASK_NAME} ###### \n"

                unshare -p -f --mount-proc=/proc /usr/lib/systemd/systemd --system
        cpus: 2
        memory: 4096
        volume:
          path: "var"
          type: {{NODE_DISK_TYPE}}
          size: {{NODE_DISK}}
        env:
          SLEEP_DURATION: 100000000000
  agent:
    count: 1
    placement: {{NODE_PLACEMENT}}
    {{#ENABLE_VIRTUAL_NETWORK}}
    networks:
      {{VIRTUAL_NETWORK_NAME}}:
        labels: {{VIRTUAL_NETWORK_PLUGIN_LABELS}}
    {{/ENABLE_VIRTUAL_NETWORK}}
    uris:
        - {{BOOTSTRAP_URI}}
        - {{UNSHARE_BINARY}}
        - "file:////home/core/.ssh/authorized_keys"
    image: {{DCOS_DAD_DOCKER_IMAGE}}
    tasks:
      node:
        goal: RUNNING
        cmd: >
                rm -rf var/*

                curl -O bootstraphttp.$FRAMEWORK_NAME.l4lb.thisdcos.directory:9200/dcos-dad-envfile-slave

                ls
                
                chmod u+x ./unshare

                printf "\n\n ######  Starting DAD slave private -- ${TASK_NAME} ###### \n"

                ./unshare -C -p -f --mount-proc=/proc /usr/lib/systemd/systemd --system
        cpus: {{NODE_CPUS}}
        memory: {{NODE_MEM}}
        volume:
          path: "docker-storage-dir"
          type: {{NODE_DISK_TYPE}}
          size: {{NODE_DISK}}
  public-agent:
    count: 1
    placement: {{NODE_PLACEMENT}}
    {{#ENABLE_VIRTUAL_NETWORK}}
    networks:
      {{VIRTUAL_NETWORK_NAME}}:
        labels: {{VIRTUAL_NETWORK_PLUGIN_LABELS}}
    {{/ENABLE_VIRTUAL_NETWORK}}
    uris:
        - {{BOOTSTRAP_URI}}
        - {{UNSHARE_BINARY}}
        - "file:////home/core/.ssh/authorized_keys"
    image: {{DCOS_DAD_DOCKER_IMAGE}}
    tasks:
      node:
        goal: RUNNING
        cmd: >
                rm -rf var/*

                curl -O bootstraphttp.$FRAMEWORK_NAME.l4lb.thisdcos.directory:9200/dcos-dad-envfile-slave-public

                ls

                chmod u+x ./unshare

                printf "\n\n ######  Starting DAD slave public -- ${TASK_NAME} ###### \n"

                ./unshare -C -p -f --mount-proc=/proc /usr/lib/systemd/systemd --system
        cpus: {{NODE_CPUS}}
        memory: {{NODE_MEM}}
        volume:
          path: "docker-storage-dir"
          type: {{NODE_DISK_TYPE}}
          size: {{NODE_DISK}}
plans:
  deploy:
    strategy: serial
    phases:
      bootstrap-phase:
        strategy: serial
        pod: bootstrap
      master-phase:
        strategy: parallel
        pod: master
      agent-phase:
        strategy: parallel
        pod: agent
      public-agent-phase:
        strategy: parallel
        pod: public-agent
